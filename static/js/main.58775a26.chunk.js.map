{"version":3,"sources":["index.js"],"names":["Letter","i","this","props","c","letterid","letterclass","cursor","id","key","className","React","Component","Phrase","str","split","map","spanify","Main","state","handleKey","bind","document","addEventListener","e","keyCode","preventDefault","setState","length","ReactDOM","render","getElementById"],"mappings":"iRAMMA,G,6KAEF,IAAIC,EAAIC,KAAKC,MAAMF,EACfG,EAAIF,KAAKC,MAAMC,EAGfC,EAAc,UAAYJ,EAC1BK,EAAcL,GAHLC,KAAKC,MAAMI,OAGQ,qBAAuB,kBAEvD,OAAO,0BAAMC,GAAIH,EAAUI,IAAKJ,EAAUK,UAAWJ,GAC3CF,O,GAVOO,IAAMC,YAerBC,E,wKACO,IAAD,OACR,OACE,8BACGX,KAAKC,MAAMW,IAAIC,MAAM,IAAIC,KAAI,SAACZ,EAAGH,GAAJ,OAAU,kBAACD,EAAD,CAAQS,IAAKR,EAAGA,EAAGA,EAAGG,EAAGA,EAAGG,OAAQ,EAAKJ,MAAMI,e,+BAM3F,OACE,2BAAIL,KAAKe,e,GAXMN,IAAMC,WAgBrBM,E,kDACJ,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAEDgB,MAAQ,CACXZ,OAAQ,EACRO,IAvCK,yDA0CP,EAAKM,UAAY,EAAKA,UAAUC,KAAf,gBARA,E,gEAYjBC,SAASC,iBAAiB,UAAWrB,KAAKkB,WAAW,K,gCAG7CI,IAGHA,EAAEC,SAAW,IAAMD,EAAEC,SAAW,KAAqB,GAAbD,EAAEC,WAK7CD,EAAEE,iBAOJxB,KAAKyB,SAAS,CAACpB,QAASL,KAAKiB,MAAMZ,OAAS,GAAKL,KAAKiB,MAAML,IAAIc,Y,+BAIhE,OACE,yBAAKlB,UAAU,QACb,yBAAKA,UAAU,QACb,kBAACG,EAAD,CAAQN,OAAQL,KAAKiB,MAAMZ,OAAQO,IAAKZ,KAAKiB,MAAML,Y,GAtC1CH,IAAMC,WA6CzBiB,IAASC,OACP,kBAACZ,EAAD,MACAI,SAASS,eAAe,W","file":"static/js/main.58775a26.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nlet poem = \"The moving finger writes; and, having writ, moves on.\";\n\nclass Letter extends React.Component {\n  render() {\n    let i = this.props.i,\n        c = this.props.c,\n        cursor = this.props.cursor;\n\n    var letterid    = \"letter-\" + i,\n        letterclass = i == cursor ? \"active-letter-good\" : \"inactive-letter\";\n\n    return <span id={letterid} key={letterid} className={letterclass}>\n             {c}\n           </span>;\n  }\n}\n\nclass Phrase extends React.Component {\n  spanify() {\n    return (\n      <span>\n        {this.props.str.split(\"\").map((c, i) => <Letter key={i} i={i} c={c} cursor={this.props.cursor} />)}\n      </span>\n    );\n  }\n\n  render() {\n    return (\n      <p>{this.spanify()}</p>\n    );\n  }\n}\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cursor: 0,\n      str: poem\n    };\n\n    this.handleKey = this.handleKey.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKey, false);\n  }\n\n  handleKey(e) {\n    // TODO This disables stuff like cmd+r. Not good.\n    // Printing keys and backspace.\n    if ((e.keyCode >= 32 && e.keyCode <= 223) || e.keyCode == 8) {\n      // Prevent keys like backspace affecting the page. Controversial,\n      // but the app is keypress-based and so not unreasonable that it\n      // would override some keys. Maybe this should be relaxed: right\n      // now my only concern is backspace.\n      e.preventDefault();\n    }\n    else {\n      // Ignore non-printing characters.\n      return;\n    }\n\n    this.setState({cursor: (this.state.cursor + 1) % this.state.str.length});\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"poem\">\n          <Phrase cursor={this.state.cursor} str={this.state.str} />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}